---
title: "Assignment 0"
output: html_notebook
---

## Exercise 1

a) The first step is to generate two samples from a standard normal distribution - one with size 100 and one with size 1000000. These will be compared as histograms and QQ-plots and their respective mean and standard deviation will be computed

```{r}
# Generate samples
sample_a = rnorm(100)
sample_b = rnorm(1000000)

# Plots
par(pin=c(2,1.25))
par(mfrow=c(2,2))
hist(sample_a)
hist(sample_b)
qqnorm(sample_a)
qqnorm(sample_b)
```


```{r}
mean_a = mean(sample_a)
mean_b = mean(sample_b)
sd_a = sd(sample_a)
sd_b = sd(sample_b)
df <- data.frame(dataset=c("n=100","n=1000000"),mean=c(mean_a, mean_b),sd=c(sd_a, sd_b))
print(df)
```

It is evident that the mean and standard deviation of the larger sample are closer to the true mean and standard deviation of the standard normal distribution, i.e. a higher statistical accuracy is achieved.

b) The probabilities for three example cases are computed for the standard normal distribution:

```{r}
print("Probabiliy that an arbitrary outcome is smaller than 2:")
pnorm(2)

print("Probabiliy that an arbitrary outcome is larger than -0.5:")
pnorm(-0.5, lower.tail = FALSE)

print("Probabiliy that an arbitrary outcome is between -1 and 2:")
pnorm(2) - pnorm(-1)
```
c) The above probabilities can also be calculated by implementing conditional selection of the data and calculating the proportion of the selected data.
```{r}
p1 = sum(sample_b < 2) / length(sample_b)
print("Probabiliy that an arbitrary outcome is smaller than 2:")
print(p1)

p2 = sum(sample_b > -0.5) / length(sample_b)
print("Probabiliy that an arbitrary outcome is smaller than 2:")
print(p2)

p3 = sum(sample_b > -1 & sample_b < 2) / length(sample_b)
print("Probabiliy that an arbitrary outcome is smaller than 2:")
print(p3)
```
d) Exercises a) and b) are repeated with a different normal distribution, centered around a mean of 3 and having a standard deviation of 2.
```{r}
mu = 3
sigma = 2

# Generate samples
sample_a = rnorm(100, mu, sigma)
sample_b = rnorm(1000000, mu, sigma)

# Plots
par(pin=c(2,1.25))
par(mfrow=c(2,2))
hist(sample_a)
hist(sample_b)
qqnorm(sample_a)
qqnorm(sample_b)

mean_a = mean(sample_a)
mean_b = mean(sample_b)
sd_a = sd(sample_a)
sd_b = sd(sample_b)
df <- data.frame(dataset=c("n=100","n=1000000"),mean=c(mean_a, mean_b),sd=c(sd_a, sd_b))
print(df)

print("Probabiliy that an arbitrary outcome is smaller than 2:")
pnorm(2, mu, sigma)

print("Probabiliy that an arbitrary outcome is larger than -0.5:")
pnorm(-0.5, mu, sigma, lower.tail = FALSE)

print("Probabiliy that an arbitrary outcome is between -1 and 2:")
pnorm(2, mu, sigma) - pnorm(-1, mu, sigma)
```
The value for which 95% of the outcomes are smaller can be found through the following procedure:
```{r}
qnorm(0.95, mu, sigma)
```
e) An alternative way to generate a sample from a non-standard normal distribution is to sample from $N(0,1)$ and subsequently offset the result by the mean and multiply it by the standard deviation. The following code tests this method with $\mu=-10$ and $\sigma=5$ and calculates the result statistics in comparison with the true mean and standard deviation:
```{r}
mu = -10
sigma = 5
sample = rnorm(1000000)
sample_xform = mu + sample * sigma

sprintf("Sample mean: %f", mean(sample_xform))
sprintf("Sample sd: %f", sd(sample_xform))
```
## Exercise 2
For this exercise, a series of samples is generated and their statistics are visualised in histograms, boxplots and QQ-plots.
```{r}
par(pin=c(1,1))
par(mfrow=c(1,3))

sample_a = rlnorm(10000, meanlog=2, sdlog=2)
hist(sample_a)
boxplot(sample_a, main="Box plot")
qqplot(sample_a, qlnorm(ppoints(length(sample_a)), 2, 2), main="QQ plot", ylab="Sample quantiles", log='xy')

sample_b = rbinom(40, size = 50, prob = 0.25)
hist(sample_b)
boxplot(sample_b, main="Box plot")
qqplot(sample_b, qbinom(ppoints(length(sample_b)), 50, 0.25), main="QQ plot", ylab="Sample quantiles")

sample_c = runif(60, min=-2, max=3)
hist(sample_c)
boxplot(sample_c, main="Box plot")
qqplot(sample_c, qunif(ppoints(length(sample_c)), -2, 3), main="QQ plot", ylab="Sample quantiles")

sample_d = rpois(200, 9)
hist(sample_d)
boxplot(sample_d, main="Box plot")
qqplot(sample_d, qpois(ppoints(length(sample_d)), 9), main="QQ plot", ylab="Sample quantiles")
```
The lognormal distribution results in a high concentration of values in the very low range, which necessitates the use of log-scale in the plot axes. The QQ-plots for the binomial and Poisson samples clearly illustrate the discrete nature of the data, as opposed to the continuously distributed uniform random samples.

## Exercise 3
The following procedure is used to load the dataset:
```{r}
data = read.table("mortality.txt", header=TRUE)
data
```
a) Using this dataset, various statistics can be obtained:
```{r}
par(pin=c(1,1))
par(mfrow=c(1,3))

data_birth = data$teen
print("Birth rate summary:")
print(summary(data_birth))

hist(data_birth)
boxplot(data_birth)
qqnorm(data_birth)

data_mort = data$mort
print("Mortality rate summary:")
print(summary(data_mort))

hist(data_mort)
boxplot(data_mort)
qqnorm(data_mort)
```
The data can be qualitatively examined for possible correlations between the birth and mortality rate using the following code:
```{r}
plot(data_birth, data_mort)
```

## Exercise 4

a) For this exercise, $2\times 1000$ test samples of size m and n are generated from a normal distribution and a two-sample t-test is performed on each sample pair. In this initial experiment, the means and standard deviations of the two sample distribution are identical.
```{r}
B = 1000
m = n = 30
mu = nu = 180
sd = 10

p_vals = numeric(B)

for(b in 1:B){
  x = rnorm(n, mu, sd)
  y = rnorm(n, nu, sd)
  p_vals[b] = t.test(x, y, var.equal = TRUE)[[3]]
}

fract_a = sum(p_vals[p_vals < 0.05]) / length(p_vals)
fract_b = sum(p_vals[p_vals < 0.1]) / length(p_vals)

print(paste("Fraction of p-values smaller than 5%", fract_a))
print(paste("Fraction of p-values smaller than 10%", fract_b))
```
